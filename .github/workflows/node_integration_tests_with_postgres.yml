name: Integration tests

on:
  workflow_call:
    inputs:
      node_version_file:
        description: "Passed to setup-node action to specify where to source the version of node from"
        required: false
        type: string
        default: ".nvmrc"

permissions:
  contents: read

jobs:
  integration-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    steps:
      - uses: actions/checkout@v4

      - name: Wait for Postgres and create app DB
        shell: bash
        env:
          PSQL: postgres://postgres:postgres@127.0.0.1:5432/postgres
        run: |
          for i in {1..60}; do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres -d postgres && break
            sleep 1
          done

      - name: Checkout hmpps-workload
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/hmpps-workload
          path: hmpps-workload
          # ref: main  # optionally pin a branch/sha
      - name: Run Flyway migrations from hmpps-workload (all migration dirs)
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t MIG_DIRS < <(find hmpps-workload -type d -path '*/src/main/resources/db/migration' | sort)
          if [ ${#MIG_DIRS[@]} -eq 0 ]; then
            echo "❌ No migration directories found under hmpps-workload"; exit 1
          fi
          echo "Found migration dirs:"; printf ' - %s\n' "${MIG_DIRS[@]}"

          # Start from a clean schema each CI run
          for D in "${MIG_DIRS[@]}"; do
            echo "▶ Running Flyway for $D"
            docker run --rm --network host \
              -v "$PWD/$D":/flyway/sql \
              flyway/flyway:10 \
              -url=jdbc:postgresql://127.0.0.1:5432/postgres \
              -user=postgres \
              -password=postgres \
              -connectRetries=60 \
              -defaultSchema=app \
              -schemas=app \
              -cleanDisabled=false \
              clean migrate
          done

      # --- now start your deps/app and run integration tests as you already do ---
      - name: Get WireMock
        run: curl -sSLo wiremock.jar https://repo1.maven.org/maven2/org/wiremock/wiremock-standalone/3.9.1/wiremock-standalone-3.9.1.jar

      - name: Start WireMock(s)
        run: |
          for p in 9091; do
            nohup java -jar wiremock.jar --port "$p" >/tmp/wm-$p.log 2>&1 &
          done

      - name: Install deps
        run: npm ci

      - name: Start app & run integration tests
        env:
          # Ensure your app uses these (or DATABASE_URL) to connect
            DATABASE_SERVER: 127.0.0.1
            DATABASE_USERNAME: postgres
            DATABASE_PASSWORD: postgres
            DATABASE: postgres
            DATABASE_PORT: "5432"
            DATABASE_SSL: "false"
          # DATABASE_URL: postgres://postgres:postgres@127.0.0.1:5432/wmt?sslmode=disable
        run: |
          nohup npm run start-feature >/tmp/app.log 2>&1 &
          sleep 5
          npm run integration-test