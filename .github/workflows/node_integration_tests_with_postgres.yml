name: Integration tests

on:
  workflow_call:
    inputs:
      node_version_file:
        description: "setup-node reads Node version from here"
        required: false
        type: string
        default: ".nvmrc"

permissions:
  contents: read

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # pull hmpps-workload alongside your repo
      - name: Checkout hmpps-workload
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/hmpps-workload
          path: hmpps-workload

      - name: Set up JDK for Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      # start the same Postgres hmpps-workload uses
      - name: Start Postgres via hmpps-workload docker-compose
        working-directory: hmpps-workload
        run: |
          docker compose up -d postgres
          # wait for PG
          for i in {1..60}; do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres -d postgres && break
            sleep 1
          done

      # run their build so Spring runs Flyway in the right order
      - name: Run hmpps-workload migrations (gradle check)
        working-directory: hmpps-workload
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://127.0.0.1:5432/postgres
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
          SPRING_FLYWAY_BASELINE_ON_MIGRATE: "true"
        run: ./gradlew --no-daemon clean check

      # sanity check the schema if you want
      - name: Sanity check schema
        run: |
          psql "postgres://postgres:postgres@127.0.0.1:5432/postgres" -c "\dt app.*" || true

      # your existing wiremock + app + tests
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm

      - run: npm ci

      - name: Start WireMock
        run: nohup java -jar wiremock.jar --port 9091 >/tmp/wm-9091.log 2>&1 &

      - name: Run integration tests against same DB
        env:
          DATABASE_SERVER: 127.0.0.1
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: postgres
          DATABASE: postgres
          DATABASE_PORT: "5432"
          DATABASE_SSL: "false"
        run: |
          nohup npm run start-feature >/tmp/app.log 2>&1 &
          sleep 5
          npm run integration-test
