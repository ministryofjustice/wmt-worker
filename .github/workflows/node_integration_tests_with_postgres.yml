name: Integration tests

on:
  workflow_call:
    inputs:
      node_version_file:
        description: "setup-node reads Node version from here"
        required: false
        type: string
        default: ".nvmrc"

permissions:
  contents: read

jobs:
  integration-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3,sqs,sns

    steps:
      - uses: actions/checkout@v4
      - name: Wait for services
        run: |
          for i in {1..60}; do pg_isready -h 127.0.0.1 -p 5432 -U postgres -d postgres && break; sleep 1; done
          curl -sfS --retry 20 --retry-connrefused --retry-delay 2 http://127.0.0.1:4566/_localstack/health || exit 1
      - name: Provide dockerized AWS CLI as `aws`
        run: |
          sudo tee /usr/local/bin/aws >/dev/null <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          IMG="${AWS_CLI_IMG:-public.ecr.aws/aws-cli/aws-cli:latest}"
          exec docker run --rm --network host \
            -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION \
            "$IMG" "$@"
          SH
          sudo chmod +x /usr/local/bin/aws

      - name: Create AWS resources in LocalStack (ported from CircleCI)
        env:
          AWS_ACCESS_KEY_ID: foobar
          AWS_SECRET_ACCESS_KEY: foobar
          AWS_DEFAULT_REGION: eu-west-2
        run: |
          set -euo pipefail
          LS=http://127.0.0.1:4566
          BUCKET=wmt-worker
          
          # ... your create-bucket / create-queue / create-topic calls ...
          
          S3Q_URL=$(aws --endpoint-url=$LS sqs get-queue-url --queue-name s3_extract_event_queue --query 'QueueUrl' --output text)
          S3Q_ARN=$(aws --endpoint-url=$LS sqs get-queue-attributes --queue-url "$S3Q_URL" --attribute-names QueueArn --query 'Attributes.QueueArn' --output text)
          
          DEQ_URL=$(aws --endpoint-url=$LS sqs get-queue-url --queue-name domain_event_queue --query 'QueueUrl' --output text)
          DEQ_ARN=$(aws --endpoint-url=$LS sqs get-queue-attributes --queue-url "$DEQ_URL" --attribute-names QueueArn --query 'Attributes.QueueArn' --output text)
          
          TOPIC_ARN=$(aws --endpoint-url=$LS sns create-topic --name domain-events --query 'TopicArn' --output text)
          
          # --- ensure jq is available (once per job is fine) ---
          if ! command -v jq >/dev/null; then
          sudo apt-get update -y && sudo apt-get install -y jq
          fi
          
          # ----- S3 -> SQS queue policy -----
          S3Q_POLICY=$(jq -c --null-input \
          --arg qArn "$S3Q_ARN" \
          --arg bucket "$BUCKET" \
          '{Version:"2012-10-17",
            Statement:[{
              Sid:"AllowS3SendMessage",
              Effect:"Allow",
              Principal:{Service:"s3.amazonaws.com"},
              Action:"sqs:SendMessage",
              Resource:$qArn,
              Condition:{ArnEquals:{"aws:SourceArn":("arn:aws:s3:::"+$bucket)}}
            }]}')
          
          aws --endpoint-url=$LS sqs set-queue-attributes \
          --queue-url "$S3Q_URL" \
          --attributes "Policy=$S3Q_POLICY"
          
          # Wire S3 notifications -> SQS
          aws --endpoint-url=$LS s3api put-bucket-notification-configuration \
          --bucket "$BUCKET" \
          --notification-configuration "{\"QueueConfigurations\":[{\"QueueArn\":\"$S3Q_ARN\",\"Events\":[\"s3:ObjectCreated:*\"]}]}"
          
          # ----- SNS -> SQS queue policy -----
          DEQ_POLICY=$(jq -c --null-input \
          --arg qArn "$DEQ_ARN" \
          --arg topic "$TOPIC_ARN" \
          '{Version:"2012-10-17",
            Statement:[{
              Sid:"AllowSnsSendMessage",
              Effect:"Allow",
              Principal:{Service:"sns.amazonaws.com"},
              Action:"sqs:SendMessage",
              Resource:$qArn,
              Condition:{ArnEquals:{"aws:SourceArn":$topic}}
            }]}')
          
          aws --endpoint-url=$LS sqs set-queue-attributes \
          --queue-url "$DEQ_URL" \
          --attributes "Policy=$DEQ_POLICY"
          
          # Subscribe domain_event_queue to topic (with filter)
          aws --endpoint-url=$LS sns subscribe \
          --topic-arn "$TOPIC_ARN" \
          --protocol sqs \
          --notification-endpoint "$DEQ_ARN" \
          --attributes '{"FilterPolicy":"{\"eventType\":[\"staff.available.hours.changed\"]}","RawMessageDelivery":"true"}'
          
          echo "LocalStack AWS resources ready."


      - name: Start hmpps_workload container
        run: |
          docker run -d --name hmpps_workload \
            --add-host=host.docker.internal:host-gateway \
            -e SPRING_PROFILES_ACTIVE=dev,docker \
            -e DATABASE_USERNAME=postgres \
            -e DATABASE_PASSWORD=postgres \
            -e DATABASE_ENDPOINT=host.docker.internal:5432 \
            -e HMPPS_SQS_LOCALSTACK_URL=http://host.docker.internal:4566 \
            ghcr.io/ministryofjustice/hmpps-workload:latest \
            /bin/sh -lc 'sleep 10 && java -javaagent:/app/agent.jar -jar /app/app.jar'

      - name: Wait for DB schema
        env:
          PGPASSWORD: postgres
        run: |
          for i in {1..120}; do
            docker run --rm --network host -e PGPASSWORD=$PGPASSWORD postgres:15 \
              psql -h 127.0.0.1 -U postgres -d postgres -tAc "SELECT 1 FROM information_schema.tables WHERE table_name='flyway_schema_history'" \
              | grep -q 1 && exit 0
            sleep 2
          done
          echo "Schema not ready in time"; docker logs hmpps_workload || true; exit 1


      - name: Install deps
        run: npm ci

      - name: Run integration tests
        env:
          DATABASE_SERVER: 127.0.0.1
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: postgres
          DATABASE: postgres
          DATABASE_PORT: "5432"
          DATABASE_SSL: "false"
        run: npm run integration-test