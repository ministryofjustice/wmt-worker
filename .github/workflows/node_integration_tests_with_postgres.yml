name: Integration tests

on:
  workflow_call:
    inputs:
      node_version_file:
        description: "Passed to setup-node action to specify where to source the version of node from"
        required: false
        type: string
        default: ".nvmrc"

permissions:
  contents: read

jobs:
  integration_test:
    name: Run the integration tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wmt
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d wmt"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
    steps:
      - uses: actions/checkout@v4

      - name: Wait for Postgres and create DB
        shell: bash
        env:
          PSQL: postgres://postgres:postgres@127.0.0.1:5432/postgres
        run: |
          for i in {1..60}; do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres -d postgres && break
            sleep 1
          done
          psql "$PSQL" -v ON_ERROR_STOP=1 -c "SELECT 1;"
          psql "$PSQL" -v ON_ERROR_STOP=1 -tc "SELECT 1 FROM pg_database WHERE datname='wmt'" | grep -q 1 || \
            psql "$PSQL" -v ON_ERROR_STOP=1 -c "CREATE DATABASE wmt;"

      # --- run Flyway migrations from hmpps-workload repo ---
      - name: Checkout hmpps-workload
        uses: actions/checkout@v4
        with:
          repository: ministryofjustice/hmpps-workload
          path: hmpps-workload
          # ref: main   # optionally pin a branch/sha

      - name: Set up JDK (Flyway via Gradle)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Run Flyway migrations from hmpps-workload
        working-directory: hmpps-workload
        env:
          FLYWAY_URL: jdbc:postgresql://127.0.0.1:5432/wmt
          FLYWAY_USER: postgres
          FLYWAY_PASSWORD: postgres
          # Adjust schema(s) if hmpps-workload uses a custom one:
          FLYWAY_SCHEMAS: public
        run: |
          # If the project is multi-module, set -p <submodule> accordingly.
          # Common variants to try if the root task isn't present:
          #   ./gradlew -p server flywayMigrate
          #   ./gradlew -p api flywayMigrate
          ./gradlew flywayMigrate \
            -Dflyway.url="$FLYWAY_URL" \
            -Dflyway.user="$FLYWAY_USER" \
            -Dflyway.password="$FLYWAY_PASSWORD" \
            -Dflyway.schemas="$FLYWAY_SCHEMAS"

      # --- now start your deps/app and run integration tests as you already do ---
      - name: Get WireMock
        run: curl -sSLo wiremock.jar https://repo1.maven.org/maven2/org/wiremock/wiremock-standalone/3.9.1/wiremock-standalone-3.9.1.jar

      - name: Start WireMock(s)
        run: |
          for p in 9091; do
            nohup java -jar wiremock.jar --port "$p" >/tmp/wm-$p.log 2>&1 &
          done

      - name: Install deps
        run: npm ci

      - name: Start app & run integration tests
        env:
          # Ensure your app uses these (or DATABASE_URL) to connect
          PGHOST: 127.0.0.1
          PGPORT: "5432"
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDATABASE: wmt
          PGSSLMODE: disable
          # DATABASE_URL: postgres://postgres:postgres@127.0.0.1:5432/wmt?sslmode=disable
        run: |
          nohup npm run start-feature >/tmp/app.log 2>&1 &
          sleep 5
          npm run integration-test