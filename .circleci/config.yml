version: 2.1

orbs:
  hmpps: ministryofjustice/hmpps@3.14
  slack: circleci/slack@4.4.2

parameters:
  alerts-slack-channel:
    type: string
    default: manage_a_workforce_dev
  node-version:
    type: string
    default: 16.6-browsers
  postgres_tag:
    default: "11"
    type: string
  database_user:
    default: "root"
    type: string  
  database_password:
    default: "dev"
    type: string

jobs:
  build:
    executor:  
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci --no-audit
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - ~/.cache
      - run:
          command: |
            DATE=$(date '+%Y-%m-%d')
            export BUILD_NUMBER=${DATE}.${CIRCLE_BUILD_NUM}
            export GIT_REF="$CIRCLE_SHA1"
            npm run record-build-info
      - run: # Run linter after build because the integration test code depend on compiled typescript...
          name: Linter check
          command: npm run lint
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - build-info.json
            - build
            - dist

  unit_test:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: unit tests
          command: npm run test
      - slack/notify:
          event: fail
          channel: << pipeline.parameters.alerts-slack-channel >>
          template: basic_fail_1
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: test_results/unit-test-reports.html

  integration_test:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
      - image: postgres:<< pipeline.parameters.postgres_tag >>
        environment:
          - POSTGRES_PASSWORD=<< pipeline.parameters.database_password >>
          - POSTGRES_USER=<< pipeline.parameters.database_user >>
      - image: quay.io/hmpps/hmpps-workload:latest
        environment:
          - DATABASE_USERNAME=<< pipeline.parameters.database_user >>
          - DATABASE_PASSWORD=<< pipeline.parameters.database_password >>
          - COMMUNITY_ENDPOINT_URL=http://localhost:8099
          - HMPPS_TIER_ENDPOINT_URL=http://localhost:8099
        entrypoint: ["/bin/sh", "-c" , "sleep 10 && java -javaagent:/app/agent.jar -jar /app/app.jar"]
      - image: localstack/localstack:0.12.15
        environment:
          - SERVICES=s3,sqs
          - DEBUG=${DEBUG- }
          - DATA_DIR=/tmp/localstack/data
          - DOCKER_HOST=unix:///var/run/docker.sock
          - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR- }
          - AWS_EXECUTION_ENV=True
          - DEFAULT_REGION=eu-west-2
          - TMPDIR=/private
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - hmpps/install_aws_cli
      - run:
          name: Wait for s3 to be ready
          command: curl -4 --connect-timeout 30 --retry-connrefused --retry 20 --retry-delay 5 http://localhost:4566
      - run:
          name: Set up s3 bucket
          command: test/integration/resources/setup-s3.sh
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
         name: Install Dependencies
         command: npm ci --no-audit
      - run:
         name: Run integration tests
         command: npm run integration-test
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: test_results/integration-test-reports.html

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build:
        filters:
          tags:
            ignore: /.*/
      - unit_test:
          context:
            - hmpps-common-vars
          requires:
            - build
      - integration_test:
          requires:
            - build
      - hmpps/helm_lint:
          name: helm_lint
      - hmpps/build_docker:
          name: build_docker
          filters:
            branches:
              only:
                - main
      - hmpps/deploy_env:
          name: deploy_dev
          env: "dev"
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - helm_lint
            - unit_test
            - integration_test
            - build_docker
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - hmpps/deploy_env:
          name: deploy_preprod
          env: "preprod"
          context: 
            - hmpps-common-vars
            - hmpps-workload-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - hmpps/deploy_env:
          name: deploy_prod
          env: "prod"
          context: 
            - hmpps-common-vars
            - hmpps-workload-prod
          requires:
            - request-prod-approval

  security:
    triggers:
      - schedule:
          cron: "0 7 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/npm_security_audit:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/trivy_latest_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/veracode_pipeline_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
  security-weekly:
    triggers:
      - schedule:
          cron: "0 5 * * 1"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/veracode_policy_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars